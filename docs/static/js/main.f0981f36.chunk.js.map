{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","people","gender","search","changeSearch","e","setState","target","value","console","log","cancelSubmit","preventDefault","sortAZ","copyPeople1","sort","a","b","name","last","sortZA","axios","get","then","res","data","results","className","id","onSubmit","this","type","onChange","placeholder","onClick","filter","p","first","toLowerCase","indexOf","map","key","src","picture","thumbnail","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAmHeA,G,kNA7GbC,MAAQ,CACNC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,I,EAaVC,aAAe,SAACC,GAEd,EAAKC,SAAS,CACZH,OAAQE,EAAEE,OAAOC,QAEnBC,QAAQC,IAAIL,EAAEE,OAAOC,Q,EAGvBG,aAAe,SAACN,GAEdA,EAAEO,kB,EAGJC,OAAS,WACP,IAAIC,EAAW,YAAO,EAAKd,MAAMC,QACjCa,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAEE,KAAKC,KAAOF,EAAEC,KAAKC,KAAe,GACzB,KAGjB,EAAKb,SAAS,CACZL,OAAQa,K,EAIZM,OAAS,WACP,IAAIN,EAAW,YAAO,EAAKd,MAAMC,QACjCa,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAEE,KAAKC,KAAOF,EAAEC,KAAKC,KAAe,GACzB,KAGjB,EAAKb,SAAS,CACZL,OAAQa,K,kEA3CS,IAAD,OAElBO,IAAMC,IAAN,iDAA2DC,MAAK,SAACC,GAC/D,EAAKlB,SAAS,CACZL,OAAQuB,EAAIC,KAAKC,QACjBxB,OAAQsB,EAAIC,KAAKC,QAAQ,GAAGxB,c,+BA0CxB,IAAD,OAEP,OACE,yBAAKyB,UAAU,aACb,0BAAMC,GAAG,QAAQC,SAAUC,KAAKnB,cAC9B,2BACEgB,UAAU,QACVI,KAAK,OACLvB,MAAOsB,KAAK9B,MAAMG,OAClB6B,SAAUF,KAAK1B,aACf6B,YAAY,mBASd,oCAAe,4BAAQN,UAAU,kBAAkBO,QAASJ,KAAKjB,QAAlD,yBAGf,oCAAe,4BAAQc,UAAU,iBAAiBO,QAASJ,KAAKV,QAAjD,yBAKf,yBAAKO,UAAU,UAEXG,KAAK9B,MAAMC,OAAOkC,QAAO,SAACC,GAExB,OAAsG,KAA9FA,EAAElB,KAAKmB,MAAQ,IAAMD,EAAElB,KAAKC,MAAMmB,cAAcC,QAAQ,EAAKvC,MAAMG,OAAOmC,kBACjFE,KAAI,SAACJ,GACN,IAAIlB,EAAI,UAAMkB,EAAElB,KAAKmB,MAAb,YAAsBD,EAAElB,KAAKC,MAGrC,OAAQ,oCACN,uBAAGQ,UAAU,WAAWc,IAAKL,EAAER,GAAGpB,OAChC,yBAAKkC,IAAKN,EAAEO,QAAQC,UAAWC,IAAK3B,IACpC,gCAASkB,EAAElB,KAAKmB,OAAe,oCAC/B,gCAASD,EAAElB,KAAKC,OAEpB,wC,GAhGE2B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.f0981f36.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport axios from \"axios\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    people: [],\n    gender: [],\n    search: \"\"\n  };\n\n  componentDidMount() {\n    // get random user data\n    axios.get(`https://randomuser.me/api/?results=250&nat=us`).then((res) => {\n      this.setState({\n        people: res.data.results,\n        gender: res.data.results[0].gender\n      });\n    })\n  }\n\n  changeSearch = (e) => {\n    // update state when input changes\n    this.setState({\n      search: e.target.value\n    });\n    console.log(e.target.value)\n  }\n\n  cancelSubmit = (e) => {\n    // don't accidentally reload page\n    e.preventDefault();\n  }\n\n  sortAZ = () => {\n    let copyPeople1 = [...this.state.people];\n    copyPeople1.sort((a, b) => {\n      if (a.name.last > b.name.last) { return 1; }\n      else { return -1; }\n\n    })\n    this.setState({\n      people: copyPeople1\n    })\n  }\n\n  sortZA = () => {\n    let copyPeople1 = [...this.state.people];\n    copyPeople1.sort((a, b) => {\n      if (a.name.last < b.name.last) { return 1; }\n      else { return -1; }\n\n    })\n    this.setState({\n      people: copyPeople1\n    })\n  }\n\n  render() {\n    // render two forms, one based on react state and one that's hard-coded for jQuery to populate\n    return (\n      <div className=\"container\">\n        <form id=\"test1\" onSubmit={this.cancelSubmit}>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.changeSearch}\n            placeholder=\"Search By Name\"\n          />\n          {/* <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.changeSearch}\n            placeholder=\"Search By Gender\"\n          /> */}\n          <span>  </span><button className=\"btn btn-primary\" onClick={this.sortAZ}>\n            Sort Last Name A to Z\n          </button>\n          <span>  </span><button className=\"btn btn-danger\" onClick={this.sortZA}>\n            Sort Last Name Z to A\n\n          </button>\n\n          <div className=\"people\">\n            {\n              this.state.people.filter((p) => {\n                // filter down based on search state\n                return (p.name.first + \" \" + p.name.last).toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\n              }).map((p) => {\n                let name = `${p.name.first} ${p.name.last}`;\n\n                // convert into jsx\n                return (<>\n                  <p className=\"centered\" key={p.id.value}>\n                    <img src={p.picture.thumbnail} alt={name} />\n                    <strong>{p.name.first}</strong><span>  </span>\n                    <strong>{p.name.last}</strong>\n                  </p>\n                <hr></hr>\n                </>\n                );\n              })\n            }\n          </div>\n        </form>\n\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}